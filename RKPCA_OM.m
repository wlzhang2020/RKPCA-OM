% Function [K,D,A,obj] = RKPCA_OM(k,feature_num,NITER)
% This funtion is our major algorithm derived from Robust KPCA
% k is n*n kernel matrix generated by data matrix
% feature_num: reduced dimension
% NITER: iteration number
% obj: objective values in the iterations
% fea: feature number
% function [K,H,d,A,alpha,lamda_M,r] = RKPCA_OM(k,feature_num,NITER)
function [W_projection, obj, rce_l21, rce_F2] = RKPCA_OM(k,feature_num,NITER)
[~,n] = size(k);
if nargin<=1
    NITER=10;
end
e1 = ones(1,n);
e2 = ones(n,1);
e = eye(n);
d = ones(n,1);
obj = zeros(NITER,1);
for iter = 1:NITER
    D = spdiags(d,0,n,n);
    C = e - D*e2*e1/(e1*D*e2);
    H = C * sqrt(D);
    K = H'*k*H; 
    K = max(K,K');
   [alpha,lamda_M]=eigenvv(K,feature_num);
   A = H*alpha*(inv(lamda_M))*alpha'*H';
   %A = max(A,A');   
    for i=1:n
       Bi=abs(k(i,i)-k(i,:)*A*k(:,i)+2*(k(i,:)*(A*k - e)*D*e2/(e1*D*e2))+(e1*D*k*(e - A*k)*D*e2/((e1*D*e2)^2)))+eps;
       d(i)=(0.5)/sqrt(Bi);
    end
   obj(iter)=sum((0.5)./d);
end
W_projection=(inv(lamda_M)).^(1/2)*alpha'*H';

rce_l21=sum((0.5)./d);
rce_F2 =sum((0.5./d).^2);
